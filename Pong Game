#include <iostream>
#include <raylib.h>
using namespace std;

Color green = {40, 220, 50, 220};
Color blue = {40, 80, 200, 200};
Color yellow = {255, 0, 255, 255};
const int game_height = 800;
const int game_width = 1280;

class Ball
{
    public:
        float x;
        float y;
        int speed_x;
        int speed_y;
        int radius;

        Ball()
        {

        }

        void Draw()
        {
            DrawCircle(x, y, radius, yellow);          //Drawing the Circle
        }

        void Movement()
        {
            x = x + speed_x;
            y = y + speed_y;
        }

        void CollisionWithEdeges()
        {
            //Checking collisions with Edeges and Making it go Opposite direction
            if( y + radius > game_height  || y - radius < 0) 
            {
                speed_y = speed_y * -1;
            }
            if(x + radius > 1280 || x - radius < 0)
            {
                speed_x = speed_x * -1;
            }
        }

        
};

class Paddle
{
    public:
        float x;
        float y;
        int height;
        int width;
        int speed;


        void Draw()
        {
            DrawRectangle(x, y, width, height, green);   
        }

        void Movement()
        {
            if(IsKeyPressed(KEY_UP) && y > 0)
            {
                y = y - speed;
            }
            if(IsKeyPressed(KEY_DOWN) && y + height < game_height)
            {
                y = y + speed;
            }
        }

};

class AI_Paddle: public Paddle
{
    public:
        //Overriding Movement function
        void Movement(int ball_y)
        {   
            if(y + height/2 > ball_y)
            {
                y = y - speed;
            }
            if( y + height/2 <= ball_y)
            {
                y = y + speed;
            } 
            if(y <= 0)
            {
                y = 0;
            }
            if( y + height >= game_height)
            {
                y = game_height - height;
            }   
                
        }
        
};

int main () {
    

    Ball ball;
    ball.x = game_width/2;
    ball.y = game_height/2;
    ball.radius = 18;
    ball.speed_x = 7;
    ball.speed_y = 5;

    Paddle paddle;
    paddle.width = 30;
    paddle.height = 120;
    paddle.speed = 50;
    paddle.x = 10;
    paddle.y = game_height/2 - paddle.height/2;

    AI_Paddle aipaddle;
    aipaddle.width = 30;
    aipaddle.height = 120;
    aipaddle.x = game_width - aipaddle.width - 10;
    aipaddle.y = game_height/2 - aipaddle.height/2;
    aipaddle.speed = 10;
    
    
    //Game window/screen
    InitWindow(game_width, game_height, "Pong Game");
    //Setting the Speed
    SetTargetFPS(60);
    
    //Game loop
    while(WindowShouldClose() == false)
    {

        //Movement
        ball.Movement();
        ball.CollisionWithEdeges();
        paddle.Movement();
        aipaddle.Movement(ball.y);

        //Checking Collisions with Ball & Paddlel
        if(CheckCollisionCircleRec(Vector2{ball.x, ball.y}, ball.radius, Rectangle{paddle.x, paddle.y, (float) paddle.width, (float) paddle.height}))
        {
            ball.speed_x = ball.speed_x * -1;
        }
        if(CheckCollisionCircleRec(Vector2{ball.x, ball.y}, ball.radius, Rectangle{aipaddle.x, aipaddle.y, (float) aipaddle.width, (float) aipaddle.height}))
        {
            ball.speed_x = ball.speed_x * -1;
        }

        //Drawing
        ClearBackground(blue);  //clearing BG before drawing 
        BeginDrawing();
        ball.Draw();
        DrawLine(game_width/2, 0, game_width/2, game_height, WHITE); //Drawing the line
        //Dawing Paddles
        paddle.Draw(); 
        aipaddle.Draw(); 
        


        EndDrawing();
    }

    
    CloseWindow(); //Closing the window/screen
    return 0;
}
